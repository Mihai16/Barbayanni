SELECT 0;
SELECT 0;
SELECT 0; 
SELECT CREATE INDEX IF NOT EXISTS idx_did ON student_registrations(dID); ALTER TABLE students DROP CONSTRAINT IF EXISTS sID; ALTER TABLE students ADD CONSTRAINT sID PRIMARY KEY (sID);  WITH fmstudents(numF, numTOT, dID) AS ( SELECT COUNT(students) FILTER (where gender = 'F'), COUNT(students), degrees.dID FROM student_registrations, degrees, students WHERE degrees.dept = 1% AND degrees.dID = student_registrations.dID AND student_registrations.sID = students.sID GROUP BY degrees.dID ), degree_percentages(dID, percentage) AS ( SELECT fmstudents.dID, (100* cast(fmstudents.numF as float)/fmstudents.numTOT) as percentage FROM fmstudents ) SELECT AVG(percentage) FROM degree_percentages;  
SELECT 0;
SELECT CREATE MATERIALIZED VIEW IF NOT EXISTS q6_filter_one(year, quartile, rID, offerID, grade, sID) AS ( SELECT co.year, co.quartile, cr.rID, cr.offerID, cr.grade, sr.sID FROM course_offers co, course_registrations cr, student_registrations sr WHERE co.year = 2018 AND co.quartile = 1 AND co.offerID = cr.offerID AND cr.rID = sr.rID GROUP BY co.year, co.quartile, cr.rID, cr.offerID, cr.grade, sr.sID ORDER BY co.year, co.quartile, cr.rID, cr.offerID, sr.sID );  CREATE MATERIALIZED VIEW IF NOT EXISTS q6_max_grade(offerID, grade) AS ( SELECT offerID, MAX(grade) FROM q6_filter_one GROUP BY offerID ORDER BY offerID ) ;   WITH test(sID, counted) AS ( SELECT fo.sID, COUNT(mx.grade = fo.grade) FROM q6_max_grade mx, q6_filter_one fo WHERE mx.offerID = fo.offerID AND mx.grade = fo.grade GROUP BY fo.sID ) SELECT sID, counted FROM test WHERE counted >= %1% ORDER BY sID;
SELECT 0;
WITH required_assistants (offerID, count) AS (SELECT cr.offerID, 1+COUNT(cr.rID)/50 FROM course_registrations cr GROUP BY cr.offerID), actual_assistants(offerID, count) AS (SELECT offerID, COUNT(sa.rID) FROM student_assistants sa GROUP BY sa.offerID) SELECT c.name, co.year, co.quartile, co.offerID, aa.nr as actual_count, ra.count as required_count FROM required_assistants ra, actual_assistants aa, course_offers co, courses c WHERE co.offerID = ra.offerID AND co.cID = c.cID AND aa.offerID = co.offerID AND aa.count < ra.count ORDER BY co.offerId;
